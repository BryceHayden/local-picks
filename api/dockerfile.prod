FROM golang:1.22-bookworm as builder

# Create and change to the app directory.
WORKDIR /app

# Retrieve application dependencies.
# This allows the container build to reuse cached dependencies.
# Expecting to copy go.mod and if present go.sum.
COPY go.mod go.sum ./
RUN go mod download

# Copy local code to the container image.
COPY . ./

# Build the binary.
RUN go build -v -o server cmd/api/main.go

# Use the official Debian slim image for a lean production container.
# https://hub.docker.com/_/debian
# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds
FROM debian:bookworm-slim
RUN set -x && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Copy the binary to the production image from the builder stage.
COPY --from=builder /app/server /app/server

# Run the web service on container startup.
CMD ["/app/server"]

# [END run_helloworld_dockerfile]
# [END cloudrun_helloworld_dockerfile]

# FROM golang:1.22-alpine

# # Set destination for COPY
# WORKDIR /app

# # Download Go modules
# COPY go.mod go.sum ./
# RUN go mod download


# RUN addgroup --system --gid 1001 gogroup
# RUN adduser --system --uid 1001 apiuser

# COPY --from=builder /app/public ./public

# # Set the correct permission for prerender cache
# RUN mkdir cmd
# RUN mkdir cmd/api
# RUN mkdir internal
# RUN mkdir internal/database
# RUN mkdir internal/server
# # RUN chown -R apiuser:gogroup internal/**/*
# # RUN chown -R apiuser:gogroup cmd/**/*


# # Copy the source code. Note the slash at the end, as explained in
# # https://docs.docker.com/reference/dockerfile/#copy
# COPY internal/*.go cmd/*.go ./

# # Build
# RUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping

# # Optional:
# # To bind to a TCP port, runtime parameters must be supplied to the docker command.
# # But we can document in the Dockerfile what ports
# # the application is going to listen on by default.
# # https://docs.docker.com/reference/dockerfile/#expose
# EXPOSE 8080

# # Run
# CMD ["/docker-gs-ping"]
